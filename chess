#include <iostream>
using namespace std;
#include <string>


class game
{
    virtual void start() {}
    virtual void end() {}
};

class chessGame : public game
{
    void start() {}
};

class matrix
{
public:


    string** arr = nullptr;
    int size = 8;

    matrix()
    {
        arr = new string * [size];

        for (int i = 0; i < size; ++i)
        {
            arr[i] = new string[size];
            for (int j = 0; j < size; ++j)
            {
                arr[i][j] = "~";
            }

        }
    }

    matrix(const matrix& obj)
    {
        this->size = obj.size;
        this->arr = new string * [size];

        for (int i = 0; i < size; ++i)
        {
            this->arr[i] = new string[size];
            for (int j = 0; j < size; ++j)
            {
                this->arr[i][j] = obj.arr[i][j];
            }
        }

    }

    ~matrix()
    {
        delete[] arr;
    }


};

class figure : public chessGame
{
public:

    figure() {}

    string colour;
    string type;
};

class black_king :public figure
{
public:

    black_king()
    {
        colour = "black";
        type = "king";
    }
};

class white_king :public figure
{
public:
    white_king()
    {
        colour = "white";
        type = "king";
    }
};

class white_knight : public figure
{
public:

    white_knight()
    {
        colour = "white";
        type = "knight";
    }
};

class white_bishop : public figure, public matrix
{
public:
    white_bishop()
    {
        colour = "white";
        type = "bishop";
    }
};

class white_quenn : public figure {
public:

    white_quenn()
    {
        colour = "white";
        type = "queen";
    }
};




class steps : public matrix
{
public:

    steps()
    {

        int c = 7; // whiteking
        int d = 7;

        int a = 0; // blackking
        int b = 7;

        int e = 3; // whitebishop
        int f = 4;

        int g = 3; // whiteknight
        int h = 6;

        int k = 0; // whitqueen
        int l = 4;






        int dii[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int djj[] = { -1, 0, 1, -1, 1, -1, 0, 1 };


        for (int k = 0; k < 8; k++)
        {
            int new_ii = c + dii[k];
            int new_jj = d + djj[k];

            if (new_ii >= 0 && new_ii < size && new_jj >= 0 && new_jj < size)
            {
                arr[new_jj][new_ii] = "0";
            }
        }


        int diii[] = { -1, -1, 1, 1 };
        int djjj[] = { -1, 1, -1, 1 };


        for (int k = 0; k < 4; k++)
        {
            int new_iii = e + diii[k];
            int new_jjj = f + djjj[k];

            while (new_iii >= 0 && new_iii < size && new_jjj >= 0 && new_jjj < size)
            {
                arr[new_jjj][new_iii] = "0";
                new_iii += diii[k];
                new_jjj += djjj[k];
            }
        }



        int diiii[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
        int djjjj[] = { -2, -1, 1, 2, 2, 1, -1, -2 };


        for (int k = 0; k < 8; k++)
        {
            int new_iiii = g + diiii[k];
            int new_jjjj = h + djjjj[k];

            if (new_iiii >= 0 && new_iiii < size && new_jjjj >= 0 && new_jjjj < size)
            {
                arr[new_jjjj][new_iiii] = "0";
            }
        }


        int djjjjj[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int diiiii[] = { -1, 0, 1, -1, 1, -1, 0, 1 };


        for (int i = 0; i < 8; i++)
        {
            int new_iiiii = k + diiiii[i];
            int new_jjjjj = l + djjjjj[i];

            while (new_iiiii >= 0 && new_iiiii < size && new_jjjjj >= 0 && new_jjjjj < size)
            {
                arr[new_jjjjj][new_iiiii] = "0";
                new_iiiii += diiiii[i];
                new_jjjjj += djjjjj[i];
            }
        }



        int di[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int dj[] = { -1, 0, 1, -1, 1, -1, 0, 1 };
        int new_i = 0;
        int new_j = 0;
        /*
        for (int i = 0; i < size; ++i)
        {
            for (int j = 0; j < size; ++j)
            {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
        */
        for (int i = 0; i < 8; i++)
        {
            int new_i = a + di[i];
            int new_j = b + dj[i];

        }



        if (arr[a][b] == "0" && arr[new_i][new_j] == "0")
        {
            cout << " mate" << endl;
        }
        else
            cout << "noo" << endl;

    }

    void f()
    {
        cout << "   a  b  c  d  e  f  g  h\n";
        for (int i = 0; i < 8; ++i) {
            std::cout << 8 - i << " ";
            for (int j = 0; j < 8; ++j) {
                std::cout <<" " << arr[i][j] << " ";
            }
            std::cout << " " << 8 - i << "\n";
        }
        cout << "   a  b  c  d  e  f  g  h\n";

    }
};





int main()
{
    game g;

    white_king obj;
    black_king obj1;
    white_knight obj2;
    white_bishop obj3;
    white_quenn obj4;

    steps s;

    
    s.f();

}
